
laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000258  000002cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000258  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000326  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088e  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070e  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e3  00000000  00000000  0000139c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c5  00000000  00000000  000018f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a8  00000000  00000000  00001cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001f5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 02 01 	jmp	0x204	; 0x204 <__vector_3>
  10:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_4>
  14:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_5>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e5       	ldi	r30, 0x58	; 88
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 35       	cpi	r26, 0x5A	; 90
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  8e:	0c 94 2a 01 	jmp	0x254	; 0x254 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initUART9600>:
 *  Author: njfg0
 */ 
#include "com_uart.h"
void initUART9600(void){
	//configurar pines tx y rx
	DDRD &=~(1<<DDD0);//entrada
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	8a b9       	out	0x0a, r24	; 10
	DDRD|=(1<<DDD1);//salida Tx
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	8a b9       	out	0x0a, r24	; 10
	
	//configurar registro A modo fast u2x0 en 1
	UCSR0A=0;
  a2:	e0 ec       	ldi	r30, 0xC0	; 192
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1
	UCSR0A|=(1<<U2X0);
  a8:	80 81       	ld	r24, Z
  aa:	82 60       	ori	r24, 0x02	; 2
  ac:	80 83       	st	Z, r24
	
	//configurar registro B, habilotar isr rx, bits para habilitar RX y TX
	UCSR0B=0;
  ae:	e1 ec       	ldi	r30, 0xC1	; 193
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
	UCSR0B|=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
  b4:	80 81       	ld	r24, Z
  b6:	88 69       	ori	r24, 0x98	; 152
  b8:	80 83       	st	Z, r24
	
	//Configurar registro C<Frame asincrono 8 bits de datos sin pariedad, 1 bit de stop
	UCSR0C=0;
  ba:	e2 ec       	ldi	r30, 0xC2	; 194
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
	UCSR0C|=(1<<UCSZ01)|(1<<UCSZ00);
  c0:	80 81       	ld	r24, Z
  c2:	86 60       	ori	r24, 0x06	; 6
  c4:	80 83       	st	Z, r24
	
	//baudrate = 207 con % de error igual a 0.16% con 9600
	UBRR0=207;
  c6:	8f ec       	ldi	r24, 0xCF	; 207
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  d2:	08 95       	ret

000000d4 <writetxtUART>:
	
}

void writetxtUART(char* texto){
  d4:	ac 01       	movw	r20, r24
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <writetxtUART+0x14>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
  da:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  de:	95 ff       	sbrs	r25, 5
  e0:	fc cf       	rjmp	.-8      	; 0xda <writetxtUART+0x6>
		UDR0=texto[i];//cuando i nulo se acaba
  e2:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
}

void writetxtUART(char* texto){
	uint8_t i;
	for (i=0;texto[i]!='\0';i++){
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	fa 01       	movw	r30, r20
  ea:	e2 0f       	add	r30, r18
  ec:	f1 1d       	adc	r31, r1
  ee:	30 81       	ld	r19, Z
  f0:	31 11       	cpse	r19, r1
  f2:	f3 cf       	rjmp	.-26     	; 0xda <writetxtUART+0x6>
		while(!(UCSR0A&(1<<UDRE0)));//esperar hasta que el udre0 esté en 1
		UDR0=texto[i];//cuando i nulo se acaba
	}
}
  f4:	08 95       	ret

000000f6 <main>:



int main(void)
{
	cli();
  f6:	f8 94       	cli
	DDRB=0b00000000;
  f8:	14 b8       	out	0x04, r1	; 4
	PORTB=0b00000001;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	85 b9       	out	0x05, r24	; 5
	DDRD=0b00000000;
  fe:	1a b8       	out	0x0a, r1	; 10
	PORTD=0b10000000;
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	8b b9       	out	0x0b, r24	; 11
	DDRC=0b00000000;
 104:	17 b8       	out	0x07, r1	; 7
	PORTC=0b00001111;
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	88 b9       	out	0x08, r24	; 8
	
	PCICR |=(1<<PCIE1)|(1 << PCIE2)|(1 << PCIE0);
 10a:	e8 e6       	ldi	r30, 0x68	; 104
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	87 60       	ori	r24, 0x07	; 7
 112:	80 83       	st	Z, r24
	PCMSK1|=(1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);
 114:	ec e6       	ldi	r30, 0x6C	; 108
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8f 60       	ori	r24, 0x0F	; 15
 11c:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT0);//D8
 11e:	eb e6       	ldi	r30, 0x6B	; 107
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 60       	ori	r24, 0x01	; 1
 126:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT23);//D7
 128:	ed e6       	ldi	r30, 0x6D	; 109
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	80 68       	ori	r24, 0x80	; 128
 130:	80 83       	st	Z, r24
	initUART9600();
 132:	0e 94 4b 00 	call	0x96	; 0x96 <initUART9600>
	sei();
 136:	78 94       	sei
 138:	ff cf       	rjmp	.-2      	; 0x138 <main+0x42>

0000013a <__vector_4>:
    {
    }
}

ISR(PCINT1_vect)
{
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	2f 93       	push	r18
 146:	3f 93       	push	r19
 148:	4f 93       	push	r20
 14a:	5f 93       	push	r21
 14c:	6f 93       	push	r22
 14e:	7f 93       	push	r23
 150:	8f 93       	push	r24
 152:	9f 93       	push	r25
 154:	af 93       	push	r26
 156:	bf 93       	push	r27
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	if (!(PINC & (1 << PC0))) {  
 15c:	30 99       	sbic	0x06, 0	; 6
 15e:	05 c0       	rjmp	.+10     	; 0x16a <__vector_4+0x30>
			writetxtUART("Control Izquierda\n"); 
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 6a 00 	call	0xd4	; 0xd4 <writetxtUART>
 168:	14 c0       	rjmp	.+40     	; 0x192 <__vector_4+0x58>
		} else if (!(PINC & (1 << PC1))) {  
 16a:	31 99       	sbic	0x06, 1	; 6
 16c:	05 c0       	rjmp	.+10     	; 0x178 <__vector_4+0x3e>
			writetxtUART("Control Arriba\n");  
 16e:	83 e1       	ldi	r24, 0x13	; 19
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 6a 00 	call	0xd4	; 0xd4 <writetxtUART>
 176:	0d c0       	rjmp	.+26     	; 0x192 <__vector_4+0x58>
		} else if (!(PINC & (1 << PC2))) {  
 178:	32 99       	sbic	0x06, 2	; 6
 17a:	05 c0       	rjmp	.+10     	; 0x186 <__vector_4+0x4c>
			writetxtUART("Control Abajo\n"); 
 17c:	83 e2       	ldi	r24, 0x23	; 35
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 6a 00 	call	0xd4	; 0xd4 <writetxtUART>
 184:	06 c0       	rjmp	.+12     	; 0x192 <__vector_4+0x58>
		} else if (!(PINC & (1 << PC3))) {  
 186:	33 99       	sbic	0x06, 3	; 6
 188:	04 c0       	rjmp	.+8      	; 0x192 <__vector_4+0x58>
			writetxtUART("Control Derecha\n"); 
 18a:	82 e3       	ldi	r24, 0x32	; 50
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 6a 00 	call	0xd4	; 0xd4 <writetxtUART>
		}
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_5>:
ISR(PCINT2_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
	if (!(PIND & (1 << PD7))) {  
 1d6:	4f 99       	sbic	0x09, 7	; 9
 1d8:	04 c0       	rjmp	.+8      	; 0x1e2 <__vector_5+0x2e>
		writetxtUART("Control A\n"); 
 1da:	83 e4       	ldi	r24, 0x43	; 67
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 6a 00 	call	0xd4	; 0xd4 <writetxtUART>
	}
}
 1e2:	ff 91       	pop	r31
 1e4:	ef 91       	pop	r30
 1e6:	bf 91       	pop	r27
 1e8:	af 91       	pop	r26
 1ea:	9f 91       	pop	r25
 1ec:	8f 91       	pop	r24
 1ee:	7f 91       	pop	r23
 1f0:	6f 91       	pop	r22
 1f2:	5f 91       	pop	r21
 1f4:	4f 91       	pop	r20
 1f6:	3f 91       	pop	r19
 1f8:	2f 91       	pop	r18
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <__vector_3>:
ISR(PCINT0_vect)
{
 204:	1f 92       	push	r1
 206:	0f 92       	push	r0
 208:	0f b6       	in	r0, 0x3f	; 63
 20a:	0f 92       	push	r0
 20c:	11 24       	eor	r1, r1
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	ef 93       	push	r30
 224:	ff 93       	push	r31
	if (!(PINB & (1 << PB0))) {  
 226:	18 99       	sbic	0x03, 0	; 3
 228:	04 c0       	rjmp	.+8      	; 0x232 <__vector_3+0x2e>
		writetxtUART("Control B\n");  
 22a:	8e e4       	ldi	r24, 0x4E	; 78
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 6a 00 	call	0xd4	; 0xd4 <writetxtUART>
	}
 232:	ff 91       	pop	r31
 234:	ef 91       	pop	r30
 236:	bf 91       	pop	r27
 238:	af 91       	pop	r26
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	7f 91       	pop	r23
 240:	6f 91       	pop	r22
 242:	5f 91       	pop	r21
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <_exit>:
 254:	f8 94       	cli

00000256 <__stop_program>:
 256:	ff cf       	rjmp	.-2      	; 0x256 <__stop_program>
